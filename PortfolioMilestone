class ItemToPurchase:
    def __init__(self):
        self.item_name: str = "none"
        self.item_price: float = 0.0
        self.item_quantity: int = 0
        self.item_description: str = "none"

    def print_item_cost(self) -> None:
        total_cost = self.item_price * self.item_quantity
        print(f"{self.item_name} {self.item_quantity} @ ${int(self.item_price)} = ${int(total_cost)}")

    def __str__(self) -> str:
        return f"{self.item_name} {self.item_quantity} @ ${self.item_price:.2f}"


class ShoppingCart:
    def __init__(self, customer_name: str = "none", current_date: str = "January 1, 2020"):
        self.customer_name = customer_name
        self.current_date = current_date
        self.cart_items = []

    def add_item(self, item: ItemToPurchase) -> None:
        self.cart_items.append(item)

    def remove_item(self, item_name: str) -> None:
        item_found = False
        for item in self.cart_items:
            if item.item_name.lower() == item_name.lower():
                self.cart_items.remove(item)
                item_found = True
                break
        if not item_found:
            print("Item not found in cart. Nothing removed.")

    def modify_item(self, item: ItemToPurchase) -> None:
        item_found = False
        for cart_item in self.cart_items:
            if cart_item.item_name.lower() == item.item_name.lower():
                if item.item_price != 0.0:
                    cart_item.item_price = item.item_price
                if item.item_quantity != 0:
                    cart_item.item_quantity = item.item_quantity
                if item.item_description != "none":
                    cart_item.item_description = item.item_description
                item_found = True
                break
        if not item_found:
            print("Item not found in cart. Nothing modified.")

    def get_num_items_in_cart(self) -> int:
        return sum(item.item_quantity for item in self.cart_items)

    def get_cost_of_cart(self) -> float:
        return sum(item.item_price * item.item_quantity for item in self.cart_items)

    def print_total(self) -> None:
        print(f"{self.customer_name}'s Shopping Cart - {self.current_date}")
        print(f"Number of Items: {self.get_num_items_in_cart()}")
        if not self.cart_items:
            print("\nSHOPPING CART IS EMPTY")
        else:
            for item in self.cart_items:
                item.print_item_cost()
            print(f"\nTotal: ${int(self.get_cost_of_cart())}")

    def print_descriptions(self) -> None:
        print(f"{self.customer_name}'s Shopping Cart - {self.current_date}")
        print("Item Descriptions")
        for item in self.cart_items:
            print(f"{item.item_name}: {item.item_description}")


# Sample usage demonstrating expected output
if __name__ == "__main__":
    # Prompt for customer name and date
    customer_name = input("Enter customer's name:\n")
    current_date = input("Enter today's date:\n")
    print()

    # Create ShoppingCart
    cart = ShoppingCart(customer_name, current_date)

    # Prompt user to input 3 items
    for i in range(1, 4):
        print(f"Item {i}")
        item = ItemToPurchase()
        item.item_name = input("Enter the item name:\n")
        item.item_description = input("Enter the item description:\n")
        item.item_price = float(input("Enter the item price:\n"))
        item.item_quantity = int(input("Enter the item quantity:\n"))
        print()
        cart.add_item(item)

    # Output cart total
    print("OUTPUT SHOPPING CART")
    cart.print_total()
    print()

    # Output item descriptions
    print("OUTPUT ITEMS' DESCRIPTIONS")
    cart.print_descriptions()
